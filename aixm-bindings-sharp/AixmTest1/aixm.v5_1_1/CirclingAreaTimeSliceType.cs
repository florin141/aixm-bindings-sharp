//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace aixm.v5_1_1
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CirclingAreaTimeSliceType", Namespace="http://www.aixm.aero/schema/5.1.1")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CirclingAreaTimeSlice", Namespace="http://www.aixm.aero/schema/5.1.1")]
    public partial class CirclingAreaTimeSliceType : aixm.v5_1_1.AbstractAIXMTimeSliceType
    {
        
        [System.Xml.Serialization.XmlElementAttribute("extent", IsNullable=true)]
        public SurfacePropertyType Extent { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("approach", IsNullable=true)]
        public InstrumentApproachProcedurePropertyType Approach { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ApproachConditionPropertyType> _condition;
        
        [System.Xml.Serialization.XmlElementAttribute("condition", IsNullable=true)]
        public System.Collections.ObjectModel.Collection<ApproachConditionPropertyType> Condition
        {
            get
            {
                return this._condition;
            }
            private set
            {
                this._condition = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Condition-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Condition collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConditionSpecified
        {
            get
            {
                return (this.Condition.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="CirclingAreaTimeSliceType" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="CirclingAreaTimeSliceType" /> class.</para>
        /// </summary>
        public CirclingAreaTimeSliceType()
        {
            this._condition = new System.Collections.ObjectModel.Collection<ApproachConditionPropertyType>();
            this._designSurface = new System.Collections.ObjectModel.Collection<ObstacleAssessmentAreaPropertyType>();
            this._annotation = new System.Collections.ObjectModel.Collection<NotePropertyType>();
            this._extension = new System.Collections.ObjectModel.Collection<CirclingAreaTimeSliceTypeExtension>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("aircraftCategory", IsNullable=true)]
        public AircraftCharacteristicPropertyType AircraftCategory { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ObstacleAssessmentAreaPropertyType> _designSurface;
        
        [System.Xml.Serialization.XmlElementAttribute("designSurface", IsNullable=true)]
        public System.Collections.ObjectModel.Collection<ObstacleAssessmentAreaPropertyType> DesignSurface
        {
            get
            {
                return this._designSurface;
            }
            private set
            {
                this._designSurface = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DesignSurface-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DesignSurface collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DesignSurfaceSpecified
        {
            get
            {
                return (this.DesignSurface.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NotePropertyType> _annotation;
        
        [System.Xml.Serialization.XmlElementAttribute("annotation", IsNullable=true)]
        public System.Collections.ObjectModel.Collection<NotePropertyType> Annotation
        {
            get
            {
                return this._annotation;
            }
            private set
            {
                this._annotation = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Annotation-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Annotation collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AnnotationSpecified
        {
            get
            {
                return (this.Annotation.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<CirclingAreaTimeSliceTypeExtension> _extension;
        
        [System.Xml.Serialization.XmlElementAttribute("extension")]
        public System.Collections.ObjectModel.Collection<CirclingAreaTimeSliceTypeExtension> Extension
        {
            get
            {
                return this._extension;
            }
            private set
            {
                this._extension = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Extension-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Extension collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExtensionSpecified
        {
            get
            {
                return (this.Extension.Count != 0);
            }
        }
    }
}
