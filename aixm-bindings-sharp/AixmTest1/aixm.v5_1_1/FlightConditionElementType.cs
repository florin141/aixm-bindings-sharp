//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace aixm.v5_1_1
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("FlightConditionElementType", Namespace="http://www.aixm.aero/schema/5.1.1")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("FlightConditionElement", Namespace="http://www.aixm.aero/schema/5.1.1")]
    public partial class FlightConditionElementType : aixm.v5_1_1.AbstractAIXMObjectType
    {
        
        [System.Xml.Serialization.XmlElementAttribute("index", IsNullable=true)]
        public aixm.v5_1_1.NoSequenceType Index { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_weather", IsNullable=true)]
        public MeteorologyPropertyType FlightCondition_Weather { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_aircraft", IsNullable=true)]
        public AircraftCharacteristicPropertyType FlightCondition_Aircraft { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_flight", IsNullable=true)]
        public FlightCharacteristicPropertyType FlightCondition_Flight { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_directFlightCondition", IsNullable=true)]
        public DirectFlightPropertyType FlightCondition_DirectFlightCondition { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_borderCrossingCondition", IsNullable=true)]
        public AirspaceBorderCrossingPropertyType FlightCondition_BorderCrossingCondition { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_operand", IsNullable=true)]
        public FlightConditionCombinationPropertyType FlightCondition_Operand { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_routePortionCondition", IsNullable=true)]
        public RoutePortionPropertyType FlightCondition_RoutePortionCondition { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_standardInstrumentDepartureCondition", IsNullable=true)]
        public StandardInstrumentDeparturePropertyType FlightCondition_StandardInstrumentDepartureCondition { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_standardInstrumentArrivalCondition", IsNullable=true)]
        public StandardInstrumentArrivalPropertyType FlightCondition_StandardInstrumentArrivalCondition { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_organisationCondition", IsNullable=true)]
        public OrganisationAuthorityPropertyType FlightCondition_OrganisationCondition { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("significantPointCondition_fixDesignatedPoint", IsNullable=true)]
        public DesignatedPointPropertyType SignificantPointCondition_FixDesignatedPoint { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("significantPointCondition_navaidSystem", IsNullable=true)]
        public NavaidPropertyType SignificantPointCondition_NavaidSystem { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("significantPointCondition_position", IsNullable=true)]
        public PointPropertyType SignificantPointCondition_Position { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("significantPointCondition_runwayPoint", IsNullable=true)]
        public RunwayCentrelinePointPropertyType SignificantPointCondition_RunwayPoint { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("significantPointCondition_aimingPoint", IsNullable=true)]
        public TouchDownLiftOffPropertyType SignificantPointCondition_AimingPoint { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("significantPointCondition_airportReferencePoint", IsNullable=true)]
        public AirportHeliportPropertyType SignificantPointCondition_AirportReferencePoint { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_airspaceCondition", IsNullable=true)]
        public AirspacePropertyType FlightCondition_AirspaceCondition { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_airportHeliportCondition", IsNullable=true)]
        public AirportHeliportPropertyType FlightCondition_AirportHeliportCondition { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("flightCondition_aerialRefuellingCondition", IsNullable=true)]
        public AerialRefuellingPropertyType FlightCondition_AerialRefuellingCondition { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("operationalCondition", IsNullable=true)]
        public FlightConditionCircumstancePropertyType OperationalCondition { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FlightRestrictionLevelPropertyType> _flightLevel;
        
        [System.Xml.Serialization.XmlElementAttribute("flightLevel", IsNullable=true)]
        public System.Collections.ObjectModel.Collection<FlightRestrictionLevelPropertyType> FlightLevel
        {
            get
            {
                return this._flightLevel;
            }
            private set
            {
                this._flightLevel = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FlightLevel-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FlightLevel collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FlightLevelSpecified
        {
            get
            {
                return (this.FlightLevel.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="FlightConditionElementType" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="FlightConditionElementType" /> class.</para>
        /// </summary>
        public FlightConditionElementType()
        {
            this._flightLevel = new System.Collections.ObjectModel.Collection<FlightRestrictionLevelPropertyType>();
            this._annotation = new System.Collections.ObjectModel.Collection<NotePropertyType>();
            this._extension = new System.Collections.ObjectModel.Collection<FlightConditionElementTypeExtension>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NotePropertyType> _annotation;
        
        [System.Xml.Serialization.XmlElementAttribute("annotation", IsNullable=true)]
        public System.Collections.ObjectModel.Collection<NotePropertyType> Annotation
        {
            get
            {
                return this._annotation;
            }
            private set
            {
                this._annotation = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Annotation-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Annotation collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AnnotationSpecified
        {
            get
            {
                return (this.Annotation.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FlightConditionElementTypeExtension> _extension;
        
        [System.Xml.Serialization.XmlElementAttribute("extension")]
        public System.Collections.ObjectModel.Collection<FlightConditionElementTypeExtension> Extension
        {
            get
            {
                return this._extension;
            }
            private set
            {
                this._extension = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Extension-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Extension collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExtensionSpecified
        {
            get
            {
                return (this.Extension.Count != 0);
            }
        }
    }
}
